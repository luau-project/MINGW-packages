diff -Naur a/CMakeLists.txt b/CMakeLists.txt
--- a/CMakeLists.txt	1969-12-31 21:00:00.000000000 -0300
+++ b/CMakeLists.txt	2024-07-05 14:57:13.328790500 -0300
@@ -0,0 +1,86 @@
+cmake_minimum_required(VERSION 3.20)
+
+project(LuaFileSystem C)
+
+enable_testing()
+
+# Start of LuaGetInfo
+if (IS_CURRENT_VERSION)
+    set(LUA_PKG_CONFIG_SUFFIX "")
+else()
+    if (NOT DEFINED LUA_VERSION)
+        message(FATAL_ERROR "Missing LUA_VERSION.")
+    endif()
+
+    if (NOT ( LUA_VERSION MATCHES [[^[0-9]+\.[0-9]+$]] ))
+        message(FATAL_ERROR "Invalid LUA_VERSION format.")
+    endif()
+
+    string(REPLACE "\." "" LUA_VERSION_SHORT ${LUA_VERSION})
+    set(LUA_PKG_CONFIG_SUFFIX ${LUA_VERSION})
+endif()
+
+set(LUA_PKG_CONFIG_MODULE_NAME "lua${LUA_PKG_CONFIG_SUFFIX}")
+include(FindPkgConfig)
+
+if (NOT PKG_CONFIG_FOUND)
+    message(FATAL_ERROR "pkgconfig not found")
+endif()
+
+pkg_check_modules(Lua ${LUA_PKG_CONFIG_MODULE_NAME})
+
+if (NOT Lua_FOUND)
+    message(FATAL_ERROR "Lua NOT FOUND")
+endif()
+
+pkg_get_variable(Lua_V ${LUA_PKG_CONFIG_MODULE_NAME} V)
+pkg_get_variable(Lua_R ${LUA_PKG_CONFIG_MODULE_NAME} R)
+
+pkg_get_variable(Lua_prefix ${LUA_PKG_CONFIG_MODULE_NAME} prefix)
+pkg_get_variable(Lua_INSTALL_BIN ${LUA_PKG_CONFIG_MODULE_NAME} INSTALL_BIN)
+pkg_get_variable(Lua_INSTALL_INC ${LUA_PKG_CONFIG_MODULE_NAME} INSTALL_INC)
+pkg_get_variable(Lua_INSTALL_LIB ${LUA_PKG_CONFIG_MODULE_NAME} INSTALL_LIB)
+pkg_get_variable(Lua_INSTALL_MAN ${LUA_PKG_CONFIG_MODULE_NAME} INSTALL_MAN)
+pkg_get_variable(Lua_INSTALL_LMOD ${LUA_PKG_CONFIG_MODULE_NAME} INSTALL_LMOD)
+pkg_get_variable(Lua_INSTALL_CMOD ${LUA_PKG_CONFIG_MODULE_NAME} INSTALL_CMOD)
+pkg_get_variable(Lua_exec_prefix ${LUA_PKG_CONFIG_MODULE_NAME} exec_prefix)
+pkg_get_variable(Lua_libdir ${LUA_PKG_CONFIG_MODULE_NAME} libdir)
+pkg_get_variable(Lua_includedir ${LUA_PKG_CONFIG_MODULE_NAME} includedir)
+
+set(_lua_dir_vars
+    "Lua_prefix" "Lua_INSTALL_BIN" "Lua_INSTALL_INC"
+    "Lua_INSTALL_LIB" "Lua_INSTALL_MAN" "Lua_INSTALL_LMOD"
+    "Lua_INSTALL_CMOD" "Lua_exec_prefix" "Lua_libdir"
+    "Lua_includedir")
+
+foreach(_dir_var ${_lua_dir_vars})
+    cmake_path(RELATIVE_PATH ${_dir_var}
+        BASE_DIRECTORY ${Lua_prefix}
+        OUTPUT_VARIABLE "RELATIVE_${_dir_var}")
+endforeach()
+
+if (NOT DEFINED LUA_VERSION_SHORT)
+	string(REPLACE "\." "" LUA_VERSION_SHORT ${Lua_V})
+endif()
+
+set(Lua_EXE "${Lua_INSTALL_BIN}/lua${LUA_PKG_CONFIG_SUFFIX}.exe")
+set(Lua_DLL "${Lua_INSTALL_BIN}/lua${LUA_VERSION_SHORT}.dll")
+# End of LuaGetInfo
+
+set(LFS_SOURCES "src/lfs.c" "src/lfs.h" "src/lfs.def")
+set(LFS_SOURCE_TEST_FILE "tests/test.lua")
+get_filename_component(LFS_TEST_FILE ${LFS_SOURCE_TEST_FILE} ABSOLUTE)
+
+add_library(lfs SHARED ${LFS_SOURCES})
+target_include_directories(lfs PRIVATE ${Lua_INCLUDE_DIRS})
+target_link_libraries(lfs PRIVATE ${Lua_DLL})
+
+set_target_properties(lfs
+	PROPERTIES
+	PREFIX ""
+)
+
+add_test(NAME lfs_test COMMAND ${Lua_EXE} ${LFS_TEST_FILE})
+
+install(FILES $<TARGET_FILE:lfs>
+	DESTINATION ${RELATIVE_Lua_INSTALL_CMOD})
